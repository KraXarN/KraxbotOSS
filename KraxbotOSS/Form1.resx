<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAIcdAACHHQAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABRUfITUFLvcFBT76JQU++iUFPvb1VV8RIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAT1PuSlBT7+9QU+//UFPv/FBT7/xQU+//UFPv7k9T
        7koAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFR7y9PU+73UFPv5k9S71FJSf8HRl3oC1BT
        8FZPU/DnT1Pu905T7i4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUVTvrlBT7/1OUu9OUVLwhVBT
        79xQU+/gUVPvX1FV7TlQU+/8UFPvrAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        whD//+DB///gAf//8AP///wP//////////8=
</value>
  </data>
</root>